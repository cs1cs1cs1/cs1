module nat

import bool
import pair

data nat = O | S nat

-- zero
z: nat
z = O

-- one
o: nat
o = S O

-- two 
t: nat
t = S (S O)

-- three
r: nat
r = S t

-- four
four: nat
four = S r

five: nat
five = S four

six: nat
six = S five

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

x: bool
x = isZero r

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

y: nat
y = succ O

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

a: bool
a = evenb O

b: bool
b = evenb (S O)

c: bool
c = evenb (S (S O))

d: bool
d = evenb r

e: bool
e = evenb (S r)
  
||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair n m))

add: nat -> nat -> nat
add O m = m
add (S n) m = S (add n m)

pf: nat -> nat
pf = add (S (S O))

||| a test, expecting O
h1: nat
h1 = addp (mkPair O O)

||| a test, expecting S (S O)
h2: nat
h2 = addp (mkPair O (S (S O)))

||| a test, expecting (S O)
h3: nat
h3 = addp (mkPair (S O) O)

||| a test, expecting (S (S (S (S (S O)))))
h4: nat 
h4 = addp (mkPair (S (S O)) (S (S (S O))))

||| given a pair of natural numbers, return its product
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair (multp (mkPair n m)) m)

mult: nat -> nat -> nat
mult O m = O
mult (S n) m = add (mult (n m) m)

factp: nat -> nat
factp O = (S O)
factp (S n) = multp (mkPair (S n) (factp n))

||| subtract b-a
subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

--#5: expp - given a pair of natural numbers, (x, n), return the value of x raised to the nth power
expp: pair nat nat -> nat
expp (mkPair O n) = (S O)
expp (mkPair x O) = (S O)
expp (mkPair x (S n)) = multp (mkPair x (expp (mkPair x n)))

--#6: lep -- given a pair of natural numbers, (a, b), return true if a is less than or equal to b, otherwise return false
lep: pair nat nat -> bool
lep (mkPair O b) = true
lep (mkPair a O) = false
lep (mkPair (S a) (S b)) = lep (mkPair a b)

--#7: eqp -- given a pair of natural numbers, (a, b), return true if a is equal to be, otherwise return false
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair O b) = false
eqp (mkPair a O) = false
eqp (mkPair (S a) (S b)) = eqp (mkPair a b)
 
--#8: gtp -- given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false
gtp: pair nat nat -> bool
gtp (mkPair a b) = (not (lep (mkPair a b)))
 
--#9: gep -- given a pair of natural numbers, (a, b), return true of a is greater than or equal to b
gep: pair nat nat -> bool
-- gep (mkPair a b) = orp (mkPair (gtp (mkPair a b)) (eqp (mkPair a b)))
gep (mkPair a b) = orp (mkPair (gtp (mkPair a b)) (eqp (mkPair a b)))

--#10: ltp -- given a pair of natural numbers, (a, b), return true if a is less than b

ltp: pair nat nat -> bool
ltp (mkPair a b) = andp (mkPair (lep (mkPair a b)) (not (eqp (mkPair a b)))) 

-- Give the nth fibonacci term:
fibbterm: nat -> nat
fibbterm O = O
fibbterm (S O) = (S O)
fibbterm (S (S n)) = addp (mkPair (fibbterm (S n)) (fibbterm n))
